# Aggregation Operators

# Create cluster
kind create cluster --config cluster.yaml

# Install prometheus stack
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update
helm install prometheus prometheus-community/kube-prometheus-stack              # comes with node exporter on default

# Modify the prometheus service ports
kubectl patch svc prometheus-kube-prometheus-prometheus -p '{"spec": {"type": "NodePort", "ports": [{"port": 9090, "protocol": "TCP", "nodePort": 30909}]}}'
kubectl patch svc prometheus-prometheus-node-exporter -p '{"spec": {"type": "NodePort", "ports": [{"port": 9100, "protocol": "TCP", "nodePort": 30910}]}}'

sleep 10

##############################################
# Expose cloud9 security group to the internet
##############################################

# View EC2 public IP
curl checkip.amazonaws.com

# Access prometheus
curl localhost:9090

##############################################
##############################################

sum (calculate sum over dimensions)
min (select minimum over dimensions)
max (select maximum over dimensions)
avg (calculate the average over dimensions)
group (all values in the resulting vector are 1)
stddev (calculate population standard deviation over dimensions)
stdvar (calculate population standard variance over dimensions)
count (count number of elements in the vector)
count_values (count number of elements with the same value)
bottomk (smallest k elements by sample value)
topk (largest k elements by sample value)
quantile (calculate œÜ-quantile (0 ‚â§ œÜ ‚â§ 1) over dimensions)
limitk (sample n elements)
limit_ratio (sample elements with approximately ùëü ratio if ùëü > 0, and the complement of such samples if ùëü = -(1.0 - ùëü))

# Sum of all kubelet http requests by the kind-control-plane node across all paths
sum(kubelet_http_requests_total{node="kind-control-plane", path=~"metrics.*"})

# Max amount of kubelet http requests by the kind-control-plane node across all paths
sum(kubelet_http_requests_total{node="kind-control-plane", path=~"metrics.*"})

##############################################
##############################################

The "by" clause picks a label and performs and aggregation operation on it.

# sum of CPU time across each identical (multiple exists) instance where the mode="user"
sum by(instance) (node_cpu_seconds_total{mode="user"})

##############################################
##############################################

The "without" clause is the opposite. It selects which label not to include.
Its more visible when the excluded label is not present in all requests.

# sum of CPU time without considering per instance (multiple exists) where the mode="user"
sum without(instance) (node_cpu_seconds_total{mode="user"})

# Delete cluster
kind delete cluster
