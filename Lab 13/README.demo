# Recording rules

# Create cluster
kind create cluster --config cluster.yaml

# Repeat everything in Lab 02, 03 and 04 except creating a cluster

##############################################
##############################################

Recording rules evaluates a promql query and stores the results. as a new time series with a specified name (a metric name).
This allows Prometheus to avoid re-evaluating complex queries every time
they are needed and instead use the precomputed results.

- Rules are ran sequentially, and can also be referenced.
- Each rule group should be specific to a scraping job.

- Annotations can be used to describe what a rule does. Templates can be used to add values to the description.
  See https://prometheus.io/docs/prometheus/latest/configuration/template_examples/ for how to use templates.

# Naming a recording rule
Rule naming syntax = level:metric_name:operations

- level is the aggregation level by labels

# Create a rule
apt install vim -y
cd /etc/prometheus
vi first_rules.yml

groups:
  - name: example1
    interval: 15s
    rules:
      - record: node_filesystem_free_percent
        expr: 100 * node_filesystem_free_bytes{job="node"} / node_filesystem_size_bytes{job="node"}
        annotations:
          description: filesystem {{.Labels.device}} on {{.Labels.instance}} is low on space, current available space is {{.value}}.
      - record: node_filesystem_free_percent_avg
        expr: avg by(instance) (node_filesystem_free_percent)
        
vi prometheus.yml

rule_files:
  - "first_rules.yml"
  
# Restart prometheus and check rules on your prometheus browser page
systemctl restart prometheus

# Delete cluster
kind delete cluster
